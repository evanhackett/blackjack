// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Game = (function(superClass) {
    extend(Game, superClass);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.initialize = function() {
      if ((this.get('deck') == null) || this.get('deck').length < 15) {
        this.set('deck', new Deck());
      }
      this.set('playerHand', this.get('deck').dealPlayer());
      this.set('dealerHand', this.get('deck').dealDealer());
      this.get('playerHand').on('add', (function(_this) {
        return function() {
          return _this.checkForBusts(_this.get('playerHand'));
        };
      })(this));
      this.get('dealerHand').on('add', (function(_this) {
        return function() {
          return _this.checkForBusts(_this.get('dealerHand'));
        };
      })(this));
      this.get('playerHand').on('bust', (function(_this) {
        return function() {
          return _this.gameOver();
        };
      })(this));
      this.get('dealerHand').on('bust', (function(_this) {
        return function() {
          return _this.gameOver();
        };
      })(this));
      this.get('playerHand').on('stand', (function(_this) {
        return function() {
          return _this.dealersTurn();
        };
      })(this));
      return this.get('dealerHand').on('stand', (function(_this) {
        return function() {
          return _this.gameOver();
        };
      })(this));
    };

    Game.prototype.dealersTurn = function() {
      var hand;
      this.get('dealerHand').at(0).flip();
      hand = this.get('dealerHand');
      while (hand.scores() < 17) {
        hand.hit();
      }
      if (hand.scores() <= 21) {
        return hand.stand();
      }
    };

    Game.prototype.gameOver = function() {
      var dealerScore, playerScore;
      playerScore = this.get('playerHand').scores();
      dealerScore = this.get('dealerHand').scores();
      if (playerScore > 21 || (dealerScore > playerScore && dealerScore <= 21)) {
        this.trigger('dealerWon');
      }
      if (dealerScore > 21 || (playerScore > dealerScore && playerScore <= 21)) {
        this.trigger('playerWon');
      }
      if (dealerScore === playerScore) {
        return this.trigger('push');
      }
    };

    Game.prototype.checkForBusts = function(hand) {
      if (hand.scores() > 21) {
        return hand.trigger('bust');
      }
    };

    Game.prototype.nextHand = function() {
      this.set('playerHand', this.get('deck').dealPlayer());
      return this.set('dealerHand', this.get('deck').dealDealer());
    };

    return Game;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=Game.js.map
