// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<div class="dealer-hand-container"></div> <div class="player-hand-container"></div> <div class="buttons"> <button class="hit-button">Hit</button> <button class="stand-button">Stand</button> <button class="play-again" style="display: none">Play Again</button> </div> <div class="winner-announcement"></div>');

    AppView.prototype.events = {
      'click .hit-button': function() {
        return this.model.get('game').get('playerHand').hit();
      },
      'click .stand-button': function() {
        return this.model.get('game').get('playerHand').stand();
      },
      'click .play-again': function() {
        this.model.get('game').initialize();
        $('.winner-announcement').text('');
        this.initializePlayerListener();
        return this.render();
      }
    };

    AppView.prototype.initialize = function() {
      this.initializePlayerListener();
      this.model.get('game').on('playerWon', function() {
        $('.winner-announcement').text('Player wins!');
        return $('.play-again').toggle();
      });
      this.model.get('game').on('dealerWon', function() {
        $('.winner-announcement').text('Dealer wins!');
        return $('.play-again').toggle();
      });
      this.model.get('game').on('push', function() {
        $('.winner-announcement').text('Tie game!');
        return $('.play-again').toggle();
      });
      return this.render();
    };

    AppView.prototype.initializePlayerListener = function() {
      return this.model.get('game').get('playerHand').on('bust stand', (function(_this) {
        return function() {
          return $('.hit-button, .stand-button').toggle();
        };
      })(this));
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('game').get('dealerHand')
      }).el);
      return this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('game').get('playerHand')
      }).el);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.js.map
